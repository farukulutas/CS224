`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Ahmet Faruk Ulutaş
// 
// Create Date: 23.11.2021 22:11:11
// Design Name: 
// Module Name: ALU32TB
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module alu_tb();
    // initial variables
    logic[31:0] a, b, result;
    logic[2:0] alucont;
    logic zero;

    // initialize the device
    ALU32 alu(a, b, alucont, result, zero);

    initial 
    begin
        a = 0; b = 15; alucont = 3'b000; #10; //and
        assert(result === 0) else $error("and operation failed.");
        a = 9; b = 5; alucont = 3'b001; #10; //or
        assert(result === 15) else $error("or operation failed.");
        a = 1; b = 2; alucont = 3'b010; #10; //add
        assert(result === 3) else $error("add operation failed.");
        a = 4; b = 2; alucont = 3'b110; #10; //subtract
        assert(result === 2) else $error("sub operation failed.");
        a = 5; b = 5; alucont = 3'b110; #10; //subtract
        assert(result === 0) else $error("sub operation failed.");
        a = 6; b = 8; alucont = 3'b110; #10; //subtract
        assert(result === -2) else $error("sub operation failed.");
        a = 8; b = 9; alucont = 3'b111; #10; //set less than
        assert(result === 1) else $error("slt operation failed.");
        a = 9; b = 8; alucont = 3'b111; #10; //set less than
        assert(result === 0) else $error("slt operation failed.");
    end
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Ahmet Faruk Ulutaş
// 
// Create Date: 23.11.2021 22:08:34
// Design Name: 
// Module Name: ALU32
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module ALU32(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);

    // initial variables
    assign zero = (result == 0); 
    
    // combinational logic
    always_comb           
        case (alucont)
            3'b000: result = a & b; // And (a && b)
            3'b001: result = a | b; // Or (a || b)
            3'b010: result = a + b; // Add (a + b)
            3'b110: result = a - b; // Subtract (a - b)
            3'b111: result = a < b; // Set less than (a < b)
            default: result = {32{1'bx}}; // default don't cares
    endcase
    
endmodule
