.data
octal: .space 8
prompt: .asciiz "\nPlease enter octal values (max 7 digits): "
promptEnd: .asciiz "\nYour input is not octal."

.globl start
.text	
start:
	# ask prompt
	la $a0, prompt
	li $v0, 4
	syscall
	
	la $a0, octal
	li $a1, 21 # max 21 bytes to read 
	li $v0, 8 # read octal number as string
	sw $a0, octal
	syscall
	
	# load the address
	la $a0, octal
	
	# Converts user input str (octal) to dec
	jal convertToDec
	
	# print the decimal value
	move $a0, $v0
	li $v0, 1
	syscall
	
	j start
	
exit:
	li $v0, 4
	la $a0, promptEnd 
	syscall 

	li $v0, 10
	syscall

convertToDec:
	allocate:
		subi $sp, $sp, 20
		sw $s0, 16($sp) 	
		sw $s1, 12($sp)
		sw $s2, 8($sp)
		sw $s3, 4($sp)
		sw $ra, 0($sp)
	# find end of the string
	# s0 contains address of the last char after stringEnd
	endOfString:
		move $s0, $a0 # s0: address of the string
		nextChar:
			lb $s1, 0($s0) # s1: current char
			blt $s1, 10, foundEnd # "enter" (ASCII : 10)"
			addi $s0, $s0, 1 # goto next char
			j nextChar
		foundEnd:
				subi $s0, $s0, 2 # excluding enter (ASCII: 10)
	li $s2, 1 # go from lsd(least sig digit) to msd(most sig digit)
	li $s3, 8
	li $v0, 0 # will contain the result
	calcDec:
		# check beginning of string reached or not
		blt $s0, $a0, finish
		lb $s1, 0($s0) # load the octal character
		bgt $s1, 55, notOctal # digit > 7 (not valid octal value)
		blt $s1, 48, notOctal # digit < 0 (not valid octal value)
		asciiToDec:
			subi $s1, $s1, 48 # get the decimal value
			mul $s1, $s2, $s1 # adjust 
		# add to the result
		add $v0, $v0, $s1
		# decrement the address go to the next char in string
		subi $s0, $s0, 1
		mul $s2, $s2, $s3 # 8**(digit)
		j calcDec
	notOctal:
		# jump exit
		j exit
	finish:
		# obtained the result in v0
	deallocate: # deallocate the stack space
		lw $ra, 0($sp)
	 	lw $s3, 4($sp)
	 	lw $s2, 8($sp)
	 	lw $s1, 12($sp)
	 	lw $s0, 16($sp)
	 	addi $sp, $sp, 20
	jr $ra # return main

-------------------------------------------------------------------------------------

.data

prompt: .asciiz "\nEnter the decimal number to convert and shift: "
promptQuit: .asciiz "\nAre you sure you want to exit? (1-yes, 0-no)"
resultInput: .asciiz "\nHexadecimal equivalent: 0x"
resultOutput: .asciiz "\nHexadecimal equivalent of shifted one: 0x"
result: .space 8

.text
.globl main

main:
	la $a0, prompt
	li $v0, 4
	syscall

	li $v0, 5
	syscall

	move $t2, $v0

	la $a0, resultInput
	li $v0, 4
	syscall

	li $t0, 8 # counter
	la $t3, result # where answer will be stored

Loop:

	beqz $t0, Exit	# branch to exit if counter is equal to zero
	rol $t2, $t2, 4	# rotate 4 bits to the left
	and $t4, $t2, 0xf # mask with 1111
	ble $t4, 9, Sum	# if less than or equal to nine, branch to sum
	addi $t4, $t4, 55 # if greater than nine, add 55

	b End

	Sum:
		addi $t4, $t4, 48 # add 48 to result

End:

	sb $t4, 0($t3)	# store hex digit into result
	addi $t3, $t3, 1 # increment address counter
	addi $t0, $t0, -1 # decrement loop counter

j Loop

shiftNibbles:
	andi $s0, $t2, 15
	andi $s1, $t2, 240
	andi $s2, $t2, 3840
	andi $s3, $t2, 61440
	andi $s4, $t2, 983040
	andi $s5, $t2, 15728640
	andi $s6, $t2, 251658240
	andi $s7, $t2, 4026531840
	
	sll $s0, $s0, 1
	sll $s2, $s2, 1
	sll $s4, $s4, 1
	sll $s6, $s6, 1
	
	srl $s1, $s1, 1
	srl $s3, $s3, 1	
	srl $s5, $s5, 1	
	srl $s7, $s7, 1	
	
	add $s6, $s6, $s7
	add $s6, $s6, $s4
	add $s6, $s6, $s5
	add $s6, $s6, $s2
	add $s6, $s6, $s3
	add $s6, $s6, $s0
	add $s6, $s6, $s1
	
	la $a0, resultOutput
	li $v0, 4
	syscall
	
	move $a0, $s6
	li $v0, 1
	syscall
	
	jr $ra

Exit:

	la $a0, result
	li $v0, 4
	syscall
	
	jal shiftNibbles

	la $a0, promptQuit
	li $v0, 4
	syscall

	li $v0, 5
	syscall

	beq $v0, 0, main
	
	la $v0, 10
	syscall
